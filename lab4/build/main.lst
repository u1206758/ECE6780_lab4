ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.TIM2_IRQHandler,"ax",%progbits
  19              		.align	1
  20              		.global	TIM2_IRQHandler
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	TIM2_IRQHandler:
  26              	.LFB40:
   1:Src/main.c    **** /**
   2:Src/main.c    ****   *
   3:Src/main.c    ****   *
   4:Src/main.c    ****   *
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * File Name          : main.c
   7:Src/main.c    ****   * Description        : Main program body
   8:Src/main.c    ****   ******************************************************************************
   9:Src/main.c    ****   ** This notice applies to any and all portions of this file
  10:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
  11:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  12:Src/main.c    ****   * inserted by the user or by software development tools
  13:Src/main.c    ****   * are owned by their respective copyright owners.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  16:Src/main.c    ****   *
  17:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  18:Src/main.c    ****   * are permitted provided that the following conditions are met:
  19:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  21:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *      and/or other materials provided with the distribution.
  24:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  25:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  26:Src/main.c    ****   *      without specific prior written permission.
  27:Src/main.c    ****   *
  28:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  29:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  30:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  31:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  32:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 2


  33:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  34:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  36:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  37:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:Src/main.c    ****   *
  39:Src/main.c    ****   ******************************************************************************
  40:Src/main.c    ****   */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  43:Src/main.c    **** #include "main.h"
  44:Src/main.c    **** #include "stm32f0xx_hal.h"
  45:Src/main.c    **** void _Error_Handler(char * file, int line);
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END Includes */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  59:Src/main.c    **** void SystemClock_Config(void);
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE BEGIN PFP */
  62:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PFP */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE BEGIN 0 */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END 0 */
  69:Src/main.c    **** 
  70:Src/main.c    **** //Timer 2 interrupt handler
  71:Src/main.c    **** void TIM2_IRQHandler(void)
  72:Src/main.c    **** {
  27              		.loc 1 72 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  73:Src/main.c    ****   //Toggle green and orange LEDs
  74:Src/main.c    ****   GPIOC->ODR ^= GPIO_ODR_8;
  32              		.loc 1 74 3 view .LVU1
  33              		.loc 1 74 8 is_stmt 0 view .LVU2
  34 0000 084B     		ldr	r3, .L2
  35 0002 5969     		ldr	r1, [r3, #20]
  36              		.loc 1 74 14 view .LVU3
  37 0004 8022     		movs	r2, #128
  38 0006 5200     		lsls	r2, r2, #1
  39 0008 4A40     		eors	r2, r1
  40 000a 5A61     		str	r2, [r3, #20]
  75:Src/main.c    ****   GPIOC->ODR ^= GPIO_ODR_9;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 3


  41              		.loc 1 75 3 is_stmt 1 view .LVU4
  42              		.loc 1 75 8 is_stmt 0 view .LVU5
  43 000c 5969     		ldr	r1, [r3, #20]
  44              		.loc 1 75 14 view .LVU6
  45 000e 8022     		movs	r2, #128
  46 0010 9200     		lsls	r2, r2, #2
  47 0012 4A40     		eors	r2, r1
  48 0014 5A61     		str	r2, [r3, #20]
  76:Src/main.c    ****   //Clear update interrupt pending flag
  77:Src/main.c    ****   TIM2->SR &= ~TIM_SR_UIF;
  49              		.loc 1 77 3 is_stmt 1 view .LVU7
  50              		.loc 1 77 7 is_stmt 0 view .LVU8
  51 0016 8022     		movs	r2, #128
  52 0018 D205     		lsls	r2, r2, #23
  53 001a 1369     		ldr	r3, [r2, #16]
  54              		.loc 1 77 12 view .LVU9
  55 001c 0121     		movs	r1, #1
  56 001e 8B43     		bics	r3, r1
  57 0020 1361     		str	r3, [r2, #16]
  78:Src/main.c    **** }
  58              		.loc 1 78 1 view .LVU10
  59              		@ sp needed
  60 0022 7047     		bx	lr
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 0024 00080048 		.word	1207961600
  65              		.cfi_endproc
  66              	.LFE40:
  68              		.section	.text.init_leds,"ax",%progbits
  69              		.align	1
  70              		.global	init_leds
  71              		.syntax unified
  72              		.code	16
  73              		.thumb_func
  75              	init_leds:
  76              	.LFB41:
  79:Src/main.c    **** 
  80:Src/main.c    **** //Initialize all four LEDs
  81:Src/main.c    **** void init_leds(void)
  82:Src/main.c    **** {
  77              		.loc 1 82 1 is_stmt 1 view -0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  83:Src/main.c    ****   //Initialize red LED, PC6
  84:Src/main.c    ****   GPIOC->MODER |= GPIO_MODER_MODER6_1; //Alternate function
  82              		.loc 1 84 3 view .LVU12
  83              		.loc 1 84 8 is_stmt 0 view .LVU13
  84 0000 264B     		ldr	r3, .L5
  85 0002 1968     		ldr	r1, [r3]
  86              		.loc 1 84 16 view .LVU14
  87 0004 8022     		movs	r2, #128
  88 0006 9201     		lsls	r2, r2, #6
  89 0008 0A43     		orrs	r2, r1
  90 000a 1A60     		str	r2, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 4


  85:Src/main.c    ****   GPIOC->OTYPER &= ~GPIO_OTYPER_OT_6; // Push-pull
  91              		.loc 1 85 3 is_stmt 1 view .LVU15
  92              		.loc 1 85 8 is_stmt 0 view .LVU16
  93 000c 5A68     		ldr	r2, [r3, #4]
  94              		.loc 1 85 17 view .LVU17
  95 000e 4021     		movs	r1, #64
  96 0010 8A43     		bics	r2, r1
  97 0012 5A60     		str	r2, [r3, #4]
  86:Src/main.c    ****   GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR6_0; //Low speed
  98              		.loc 1 86 3 is_stmt 1 view .LVU18
  99              		.loc 1 86 8 is_stmt 0 view .LVU19
 100 0014 9A68     		ldr	r2, [r3, #8]
 101              		.loc 1 86 18 view .LVU20
 102 0016 2249     		ldr	r1, .L5+4
 103 0018 0A40     		ands	r2, r1
 104 001a 9A60     		str	r2, [r3, #8]
  87:Src/main.c    ****   GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR6_0 | GPIO_PUPDR_PUPDR6_1); //No pull up or down
 105              		.loc 1 87 3 is_stmt 1 view .LVU21
 106              		.loc 1 87 8 is_stmt 0 view .LVU22
 107 001c DA68     		ldr	r2, [r3, #12]
 108              		.loc 1 87 16 view .LVU23
 109 001e 2149     		ldr	r1, .L5+8
 110 0020 0A40     		ands	r2, r1
 111 0022 DA60     		str	r2, [r3, #12]
  88:Src/main.c    ****   GPIOC->AFR[0] &= 0xF0FFFFFF;
 112              		.loc 1 88 3 is_stmt 1 view .LVU24
 113              		.loc 1 88 13 is_stmt 0 view .LVU25
 114 0024 1A6A     		ldr	r2, [r3, #32]
 115              		.loc 1 88 17 view .LVU26
 116 0026 2049     		ldr	r1, .L5+12
 117 0028 0A40     		ands	r2, r1
 118 002a 1A62     		str	r2, [r3, #32]
  89:Src/main.c    **** 
  90:Src/main.c    ****   //Initialize blue LED, PC7
  91:Src/main.c    ****   GPIOC->MODER |= GPIO_MODER_MODER7_1; //Alternate function
 119              		.loc 1 91 3 is_stmt 1 view .LVU27
 120              		.loc 1 91 8 is_stmt 0 view .LVU28
 121 002c 1968     		ldr	r1, [r3]
 122              		.loc 1 91 16 view .LVU29
 123 002e 8022     		movs	r2, #128
 124 0030 1202     		lsls	r2, r2, #8
 125 0032 0A43     		orrs	r2, r1
 126 0034 1A60     		str	r2, [r3]
  92:Src/main.c    ****   GPIOC->OTYPER &= ~GPIO_OTYPER_OT_7; // Push-pull
 127              		.loc 1 92 3 is_stmt 1 view .LVU30
 128              		.loc 1 92 8 is_stmt 0 view .LVU31
 129 0036 5A68     		ldr	r2, [r3, #4]
 130              		.loc 1 92 17 view .LVU32
 131 0038 8021     		movs	r1, #128
 132 003a 8A43     		bics	r2, r1
 133 003c 5A60     		str	r2, [r3, #4]
  93:Src/main.c    ****   GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR7_0; //Low speed
 134              		.loc 1 93 3 is_stmt 1 view .LVU33
 135              		.loc 1 93 8 is_stmt 0 view .LVU34
 136 003e 9A68     		ldr	r2, [r3, #8]
 137              		.loc 1 93 18 view .LVU35
 138 0040 1A49     		ldr	r1, .L5+16
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 5


 139 0042 0A40     		ands	r2, r1
 140 0044 9A60     		str	r2, [r3, #8]
  94:Src/main.c    ****   GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR7_0 | GPIO_PUPDR_PUPDR7_1); //No pull up or down
 141              		.loc 1 94 3 is_stmt 1 view .LVU36
 142              		.loc 1 94 8 is_stmt 0 view .LVU37
 143 0046 DA68     		ldr	r2, [r3, #12]
 144              		.loc 1 94 16 view .LVU38
 145 0048 1949     		ldr	r1, .L5+20
 146 004a 0A40     		ands	r2, r1
 147 004c DA60     		str	r2, [r3, #12]
  95:Src/main.c    ****   GPIOC->AFR[0] &= 0x0FFFFFFF;
 148              		.loc 1 95 3 is_stmt 1 view .LVU39
 149              		.loc 1 95 13 is_stmt 0 view .LVU40
 150 004e 1A6A     		ldr	r2, [r3, #32]
 151              		.loc 1 95 17 view .LVU41
 152 0050 1201     		lsls	r2, r2, #4
 153 0052 1209     		lsrs	r2, r2, #4
 154 0054 1A62     		str	r2, [r3, #32]
  96:Src/main.c    **** 
  97:Src/main.c    ****   //Initialize orange LED, PC8
  98:Src/main.c    ****   GPIOC->MODER |= GPIO_MODER_MODER8_0; //General purpose output
 155              		.loc 1 98 3 is_stmt 1 view .LVU42
 156              		.loc 1 98 8 is_stmt 0 view .LVU43
 157 0056 1968     		ldr	r1, [r3]
 158              		.loc 1 98 16 view .LVU44
 159 0058 8022     		movs	r2, #128
 160 005a 5202     		lsls	r2, r2, #9
 161 005c 0A43     		orrs	r2, r1
 162 005e 1A60     		str	r2, [r3]
  99:Src/main.c    ****   GPIOC->OTYPER &= ~GPIO_OTYPER_OT_8; // Push-pull
 163              		.loc 1 99 3 is_stmt 1 view .LVU45
 164              		.loc 1 99 8 is_stmt 0 view .LVU46
 165 0060 5A68     		ldr	r2, [r3, #4]
 166              		.loc 1 99 17 view .LVU47
 167 0062 1449     		ldr	r1, .L5+24
 168 0064 0A40     		ands	r2, r1
 169 0066 5A60     		str	r2, [r3, #4]
 100:Src/main.c    ****   GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR8_0; //Low speed
 170              		.loc 1 100 3 is_stmt 1 view .LVU48
 171              		.loc 1 100 8 is_stmt 0 view .LVU49
 172 0068 9A68     		ldr	r2, [r3, #8]
 173              		.loc 1 100 18 view .LVU50
 174 006a 1349     		ldr	r1, .L5+28
 175 006c 0A40     		ands	r2, r1
 176 006e 9A60     		str	r2, [r3, #8]
 101:Src/main.c    ****   GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR8_1); //No pull up or down
 177              		.loc 1 101 3 is_stmt 1 view .LVU51
 178              		.loc 1 101 8 is_stmt 0 view .LVU52
 179 0070 DA68     		ldr	r2, [r3, #12]
 180              		.loc 1 101 16 view .LVU53
 181 0072 1249     		ldr	r1, .L5+32
 182 0074 0A40     		ands	r2, r1
 183 0076 DA60     		str	r2, [r3, #12]
 102:Src/main.c    **** 
 103:Src/main.c    ****   //Initialize green LED, PC9
 104:Src/main.c    ****   GPIOC->MODER |= GPIO_MODER_MODER9_0; //General purpose output
 184              		.loc 1 104 3 is_stmt 1 view .LVU54
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 6


 185              		.loc 1 104 8 is_stmt 0 view .LVU55
 186 0078 1968     		ldr	r1, [r3]
 187              		.loc 1 104 16 view .LVU56
 188 007a 8022     		movs	r2, #128
 189 007c D202     		lsls	r2, r2, #11
 190 007e 0A43     		orrs	r2, r1
 191 0080 1A60     		str	r2, [r3]
 105:Src/main.c    ****   GPIOC->OTYPER &= ~GPIO_OTYPER_OT_9; // Push-pull
 192              		.loc 1 105 3 is_stmt 1 view .LVU57
 193              		.loc 1 105 8 is_stmt 0 view .LVU58
 194 0082 5A68     		ldr	r2, [r3, #4]
 195              		.loc 1 105 17 view .LVU59
 196 0084 0E49     		ldr	r1, .L5+36
 197 0086 0A40     		ands	r2, r1
 198 0088 5A60     		str	r2, [r3, #4]
 106:Src/main.c    ****   GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR9_0; //Low speed
 199              		.loc 1 106 3 is_stmt 1 view .LVU60
 200              		.loc 1 106 8 is_stmt 0 view .LVU61
 201 008a 9A68     		ldr	r2, [r3, #8]
 202              		.loc 1 106 18 view .LVU62
 203 008c 0D49     		ldr	r1, .L5+40
 204 008e 0A40     		ands	r2, r1
 205 0090 9A60     		str	r2, [r3, #8]
 107:Src/main.c    ****   GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR9_0 | GPIO_PUPDR_PUPDR9_1); //No pull up or down
 206              		.loc 1 107 3 is_stmt 1 view .LVU63
 207              		.loc 1 107 8 is_stmt 0 view .LVU64
 208 0092 DA68     		ldr	r2, [r3, #12]
 209              		.loc 1 107 16 view .LVU65
 210 0094 0C49     		ldr	r1, .L5+44
 211 0096 0A40     		ands	r2, r1
 212 0098 DA60     		str	r2, [r3, #12]
 108:Src/main.c    **** 
 109:Src/main.c    **** }
 213              		.loc 1 109 1 view .LVU66
 214              		@ sp needed
 215 009a 7047     		bx	lr
 216              	.L6:
 217              		.align	2
 218              	.L5:
 219 009c 00080048 		.word	1207961600
 220 00a0 FFEFFFFF 		.word	-4097
 221 00a4 FFCFFFFF 		.word	-12289
 222 00a8 FFFFFFF0 		.word	-251658241
 223 00ac FFBFFFFF 		.word	-16385
 224 00b0 FF3FFFFF 		.word	-49153
 225 00b4 FFFEFFFF 		.word	-257
 226 00b8 FFFFFEFF 		.word	-65537
 227 00bc FFFFFCFF 		.word	-196609
 228 00c0 FFFDFFFF 		.word	-513
 229 00c4 FFFFFBFF 		.word	-262145
 230 00c8 FFFFF3FF 		.word	-786433
 231              		.cfi_endproc
 232              	.LFE41:
 234              		.section	.text._Error_Handler,"ax",%progbits
 235              		.align	1
 236              		.global	_Error_Handler
 237              		.syntax unified
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 7


 238              		.code	16
 239              		.thumb_func
 241              	_Error_Handler:
 242              	.LFB44:
 110:Src/main.c    **** 
 111:Src/main.c    **** int main(void) 
 112:Src/main.c    **** {
 113:Src/main.c    ****   HAL_Init(); // Reset of all peripherals, init the Flash and Systick
 114:Src/main.c    ****   SystemClock_Config(); //Configure the system clock
 115:Src/main.c    **** 
 116:Src/main.c    ****   //Enable clock to GPIOC for LEDS
 117:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; 
 118:Src/main.c    ****   //Enable clock to GPIOA for button
 119:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 120:Src/main.c    ****   
 121:Src/main.c    ****   //Initialize all LEDs
 122:Src/main.c    ****   init_leds(); 
 123:Src/main.c    **** 
 124:Src/main.c    ****   //Set green LED on and orange LED off
 125:Src/main.c    ****   GPIOC->BSRR |= GPIO_BSRR_BS_9;
 126:Src/main.c    ****   GPIOC->BSRR |= GPIO_BSRR_BR_8;
 127:Src/main.c    **** 
 128:Src/main.c    ****   //Enable clock to timer 2
 129:Src/main.c    ****   RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 130:Src/main.c    ****   //Set timer 2 frequency to 1 KHz by dividing by 7,999
 131:Src/main.c    ****   TIM2->PSC = 7999U;
 132:Src/main.c    ****   //Set ARR to count to 250
 133:Src/main.c    ****   TIM2->ARR = 250U;
 134:Src/main.c    ****   //Set edge-aligned mode
 135:Src/main.c    ****   TIM2->CR1 &= ~TIM_CR1_CMS;
 136:Src/main.c    ****   //Set upcounting mode
 137:Src/main.c    ****   TIM2->CR1 &= ~TIM_CR1_DIR;
 138:Src/main.c    ****   //Enable update event generation
 139:Src/main.c    ****   TIM2->CR1 &= ~TIM_CR1_UDIS;
 140:Src/main.c    ****   //Enable update interrupt
 141:Src/main.c    ****   TIM2->DIER |= TIM_DIER_UIE;
 142:Src/main.c    ****   //Enable timer 2
 143:Src/main.c    ****   TIM2->CR1 |= TIM_CR1_CEN;
 144:Src/main.c    **** 
 145:Src/main.c    ****   //Enable timer 2 interrupt handler in NVIC
 146:Src/main.c    ****   NVIC_EnableIRQ(TIM2_IRQn);
 147:Src/main.c    ****   //Set priority to 1
 148:Src/main.c    ****   NVIC_SetPriority(TIM2_IRQn,1);
 149:Src/main.c    **** 
 150:Src/main.c    ****   //Enable clock to timer 3
 151:Src/main.c    ****   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 152:Src/main.c    ****   //Set timer 3 frequency to 800 KHz by dividing by 10
 153:Src/main.c    ****   TIM3->PSC = 9U;
 154:Src/main.c    ****   //Set ARR to count to 1000
 155:Src/main.c    ****   TIM3->ARR = 1000U;
 156:Src/main.c    ****   //Set edge-aligned mode
 157:Src/main.c    ****   TIM3->CR1 &= ~TIM_CR1_CMS;
 158:Src/main.c    ****   //Set upcounting mode
 159:Src/main.c    ****   TIM3->CR1 &= ~TIM_CR1_DIR;
 160:Src/main.c    ****   //Enable update event generation
 161:Src/main.c    ****   TIM3->CR1 &= ~TIM_CR1_UDIS;
 162:Src/main.c    ****   //Configure channels 1 & 2 as outputs
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 8


 163:Src/main.c    ****   TIM3->CCMR1 &= ~TIM_CCMR1_CC1S;
 164:Src/main.c    ****   TIM3->CCMR1 &= ~TIM_CCMR1_CC2S;
 165:Src/main.c    ****   //Set output channel 1 to PWM mode 2
 166:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC1M;
 167:Src/main.c    ****   //Set output channel 2 to PWM mode 1
 168:Src/main.c    ****   TIM3->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 169:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2M_1;
 170:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2M_2;
 171:Src/main.c    ****   //Enable output compare preload for both channels
 172:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC1PE;
 173:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2PE;
 174:Src/main.c    ****   //Set output enable for both channels
 175:Src/main.c    ****   TIM3->CCER |= TIM_CCER_CC1E;
 176:Src/main.c    ****   TIM3->CCER |= TIM_CCER_CC2E;
 177:Src/main.c    ****   //Enable timer 3
 178:Src/main.c    ****   TIM3->CR1 |= TIM_CR1_CEN;
 179:Src/main.c    **** 
 180:Src/main.c    ****   //To best demonstrate the change in the CCRx values on the LED brightness
 181:Src/main.c    ****   //  and the differences between PWM modes 1 & 2 I am configuring timer 1 
 182:Src/main.c    ****   //  in up-down count mode and the main loop will set the CCRx values of
 183:Src/main.c    ****   //  timer 3 to the count of timer 1, approximating a sine wave like in
 184:Src/main.c    ****   //  figure 3.5 in the lab handout
 185:Src/main.c    ****   
 186:Src/main.c    ****   //Enable clock to timer 1
 187:Src/main.c    ****   RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 188:Src/main.c    ****   //Set timer 1 frequency to 1 KHz by dividing by 8000
 189:Src/main.c    ****   TIM1->PSC = 7999U;
 190:Src/main.c    ****   //Set ARR to count to 1000
 191:Src/main.c    ****   TIM1->ARR = 1000U;
 192:Src/main.c    ****   //Set center aligned mode 3
 193:Src/main.c    ****   TIM1->CR1 |= TIM_CR1_CMS;
 194:Src/main.c    ****   //Set upcounting mode
 195:Src/main.c    ****   TIM2->CR1 &= ~TIM_CR1_DIR;
 196:Src/main.c    ****   //Enable timer 1
 197:Src/main.c    ****   TIM1->CR1 |= TIM_CR1_CEN;
 198:Src/main.c    ****   
 199:Src/main.c    ****   //Main loop
 200:Src/main.c    ****   while (1) 
 201:Src/main.c    ****   { 
 202:Src/main.c    ****     TIM3->CCR1 = TIM1->CNT;
 203:Src/main.c    ****     TIM3->CCR2 = TIM1->CNT;
 204:Src/main.c    ****   }
 205:Src/main.c    **** }
 206:Src/main.c    **** 
 207:Src/main.c    **** /** System Clock Configuration
 208:Src/main.c    **** */
 209:Src/main.c    **** void SystemClock_Config(void)
 210:Src/main.c    **** {
 211:Src/main.c    **** 
 212:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 213:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 214:Src/main.c    **** 
 215:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 216:Src/main.c    ****     */
 217:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 218:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 219:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 9


 220:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 221:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 222:Src/main.c    ****   {
 223:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 224:Src/main.c    ****   }
 225:Src/main.c    **** 
 226:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 227:Src/main.c    ****     */
 228:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 229:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 230:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 231:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 232:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 233:Src/main.c    **** 
 234:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 235:Src/main.c    ****   {
 236:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 237:Src/main.c    ****   }
 238:Src/main.c    **** 
 239:Src/main.c    ****     /**Configure the Systick interrupt time
 240:Src/main.c    ****     */
 241:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 242:Src/main.c    **** 
 243:Src/main.c    ****     /**Configure the Systick
 244:Src/main.c    ****     */
 245:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 246:Src/main.c    **** 
 247:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 248:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 249:Src/main.c    **** }
 250:Src/main.c    **** 
 251:Src/main.c    **** /* USER CODE BEGIN 4 */
 252:Src/main.c    **** 
 253:Src/main.c    **** /* USER CODE END 4 */
 254:Src/main.c    **** 
 255:Src/main.c    **** /**
 256:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 257:Src/main.c    ****   * @param  None
 258:Src/main.c    ****   * @retval None
 259:Src/main.c    ****   */
 260:Src/main.c    **** void _Error_Handler(char * file, int line)
 261:Src/main.c    **** {
 243              		.loc 1 261 1 is_stmt 1 view -0
 244              		.cfi_startproc
 245              		@ Volatile: function does not return.
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249              	.LVL0:
 250              	.L8:
 262:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 263:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 264:Src/main.c    ****   while(1)
 251              		.loc 1 264 3 view .LVU68
 265:Src/main.c    ****   {
 266:Src/main.c    ****   }
 252              		.loc 1 266 3 view .LVU69
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 10


 264:Src/main.c    ****   {
 253              		.loc 1 264 8 view .LVU70
 254 0000 FEE7     		b	.L8
 255              		.cfi_endproc
 256              	.LFE44:
 258              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 259              		.align	2
 260              	.LC0:
 261 0000 5372632F 		.ascii	"Src/main.c\000"
 261      6D61696E 
 261      2E6300
 262              		.global	__aeabi_uidiv
 263              		.section	.text.SystemClock_Config,"ax",%progbits
 264              		.align	1
 265              		.global	SystemClock_Config
 266              		.syntax unified
 267              		.code	16
 268              		.thumb_func
 270              	SystemClock_Config:
 271              	.LFB43:
 210:Src/main.c    **** 
 272              		.loc 1 210 1 view -0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 72
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 276 0000 00B5     		push	{lr}
 277              	.LCFI0:
 278              		.cfi_def_cfa_offset 4
 279              		.cfi_offset 14, -4
 280 0002 93B0     		sub	sp, sp, #76
 281              	.LCFI1:
 282              		.cfi_def_cfa_offset 80
 212:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 283              		.loc 1 212 3 view .LVU72
 213:Src/main.c    **** 
 284              		.loc 1 213 3 view .LVU73
 217:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 285              		.loc 1 217 3 view .LVU74
 217:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 286              		.loc 1 217 36 is_stmt 0 view .LVU75
 287 0004 0223     		movs	r3, #2
 288 0006 0593     		str	r3, [sp, #20]
 218:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 289              		.loc 1 218 3 is_stmt 1 view .LVU76
 218:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 290              		.loc 1 218 30 is_stmt 0 view .LVU77
 291 0008 013B     		subs	r3, r3, #1
 292 000a 0893     		str	r3, [sp, #32]
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 293              		.loc 1 219 3 is_stmt 1 view .LVU78
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 294              		.loc 1 219 41 is_stmt 0 view .LVU79
 295 000c 0F33     		adds	r3, r3, #15
 296 000e 0993     		str	r3, [sp, #36]
 220:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 297              		.loc 1 220 3 is_stmt 1 view .LVU80
 220:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 11


 298              		.loc 1 220 34 is_stmt 0 view .LVU81
 299 0010 0023     		movs	r3, #0
 300 0012 0E93     		str	r3, [sp, #56]
 221:Src/main.c    ****   {
 301              		.loc 1 221 3 is_stmt 1 view .LVU82
 221:Src/main.c    ****   {
 302              		.loc 1 221 7 is_stmt 0 view .LVU83
 303 0014 05A8     		add	r0, sp, #20
 304 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 305              	.LVL1:
 221:Src/main.c    ****   {
 306              		.loc 1 221 6 discriminator 1 view .LVU84
 307 001a 0028     		cmp	r0, #0
 308 001c 1ED1     		bne	.L12
 228:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 309              		.loc 1 228 3 is_stmt 1 view .LVU85
 228:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 310              		.loc 1 228 31 is_stmt 0 view .LVU86
 311 001e 0723     		movs	r3, #7
 312 0020 0193     		str	r3, [sp, #4]
 230:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 313              		.loc 1 230 3 is_stmt 1 view .LVU87
 230:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 314              		.loc 1 230 34 is_stmt 0 view .LVU88
 315 0022 0023     		movs	r3, #0
 316 0024 0293     		str	r3, [sp, #8]
 231:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 317              		.loc 1 231 3 is_stmt 1 view .LVU89
 231:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 318              		.loc 1 231 35 is_stmt 0 view .LVU90
 319 0026 0393     		str	r3, [sp, #12]
 232:Src/main.c    **** 
 320              		.loc 1 232 3 is_stmt 1 view .LVU91
 232:Src/main.c    **** 
 321              		.loc 1 232 36 is_stmt 0 view .LVU92
 322 0028 0493     		str	r3, [sp, #16]
 234:Src/main.c    ****   {
 323              		.loc 1 234 3 is_stmt 1 view .LVU93
 234:Src/main.c    ****   {
 324              		.loc 1 234 7 is_stmt 0 view .LVU94
 325 002a 0021     		movs	r1, #0
 326 002c 01A8     		add	r0, sp, #4
 327 002e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 328              	.LVL2:
 234:Src/main.c    ****   {
 329              		.loc 1 234 6 discriminator 1 view .LVU95
 330 0032 0028     		cmp	r0, #0
 331 0034 16D1     		bne	.L13
 241:Src/main.c    **** 
 332              		.loc 1 241 3 is_stmt 1 view .LVU96
 241:Src/main.c    **** 
 333              		.loc 1 241 22 is_stmt 0 view .LVU97
 334 0036 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 335              	.LVL3:
 241:Src/main.c    **** 
 336              		.loc 1 241 3 discriminator 1 view .LVU98
 337 003a FA21     		movs	r1, #250
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 12


 338 003c 8900     		lsls	r1, r1, #2
 339 003e FFF7FEFF 		bl	__aeabi_uidiv
 340              	.LVL4:
 341 0042 FFF7FEFF 		bl	HAL_SYSTICK_Config
 342              	.LVL5:
 245:Src/main.c    **** 
 343              		.loc 1 245 3 is_stmt 1 view .LVU99
 344 0046 0420     		movs	r0, #4
 345 0048 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 346              	.LVL6:
 248:Src/main.c    **** }
 347              		.loc 1 248 3 view .LVU100
 348 004c 0120     		movs	r0, #1
 349 004e 0022     		movs	r2, #0
 350 0050 0021     		movs	r1, #0
 351 0052 4042     		rsbs	r0, r0, #0
 352 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 353              	.LVL7:
 249:Src/main.c    **** 
 354              		.loc 1 249 1 is_stmt 0 view .LVU101
 355 0058 13B0     		add	sp, sp, #76
 356              		@ sp needed
 357 005a 00BD     		pop	{pc}
 358              	.L12:
 223:Src/main.c    ****   }
 359              		.loc 1 223 5 is_stmt 1 view .LVU102
 360 005c 0348     		ldr	r0, .L14
 361 005e DF21     		movs	r1, #223
 362 0060 FFF7FEFF 		bl	_Error_Handler
 363              	.LVL8:
 364              	.L13:
 236:Src/main.c    ****   }
 365              		.loc 1 236 5 view .LVU103
 366 0064 0148     		ldr	r0, .L14
 367 0066 EC21     		movs	r1, #236
 368 0068 FFF7FEFF 		bl	_Error_Handler
 369              	.LVL9:
 370              	.L15:
 371              		.align	2
 372              	.L14:
 373 006c 00000000 		.word	.LC0
 374              		.cfi_endproc
 375              	.LFE43:
 377              		.section	.text.main,"ax",%progbits
 378              		.align	1
 379              		.global	main
 380              		.syntax unified
 381              		.code	16
 382              		.thumb_func
 384              	main:
 385              	.LFB42:
 112:Src/main.c    ****   HAL_Init(); // Reset of all peripherals, init the Flash and Systick
 386              		.loc 1 112 1 view -0
 387              		.cfi_startproc
 388              		@ Volatile: function does not return.
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 13


 391 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 392              	.LCFI2:
 393              		.cfi_def_cfa_offset 20
 394              		.cfi_offset 4, -20
 395              		.cfi_offset 5, -16
 396              		.cfi_offset 6, -12
 397              		.cfi_offset 7, -8
 398              		.cfi_offset 14, -4
 399 0002 D646     		mov	lr, r10
 400 0004 4F46     		mov	r7, r9
 401 0006 4646     		mov	r6, r8
 402 0008 C0B5     		push	{r6, r7, lr}
 403              	.LCFI3:
 404              		.cfi_def_cfa_offset 32
 405              		.cfi_offset 8, -32
 406              		.cfi_offset 9, -28
 407              		.cfi_offset 10, -24
 113:Src/main.c    ****   SystemClock_Config(); //Configure the system clock
 408              		.loc 1 113 3 view .LVU105
 409 000a FFF7FEFF 		bl	HAL_Init
 410              	.LVL10:
 114:Src/main.c    **** 
 411              		.loc 1 114 3 view .LVU106
 412 000e FFF7FEFF 		bl	SystemClock_Config
 413              	.LVL11:
 117:Src/main.c    ****   //Enable clock to GPIOA for button
 414              		.loc 1 117 3 view .LVU107
 117:Src/main.c    ****   //Enable clock to GPIOA for button
 415              		.loc 1 117 6 is_stmt 0 view .LVU108
 416 0012 554C     		ldr	r4, .L18
 417 0014 6269     		ldr	r2, [r4, #20]
 117:Src/main.c    ****   //Enable clock to GPIOA for button
 418              		.loc 1 117 15 view .LVU109
 419 0016 8023     		movs	r3, #128
 420 0018 1B03     		lsls	r3, r3, #12
 421 001a 1343     		orrs	r3, r2
 422 001c 6361     		str	r3, [r4, #20]
 119:Src/main.c    ****   
 423              		.loc 1 119 3 is_stmt 1 view .LVU110
 119:Src/main.c    ****   
 424              		.loc 1 119 6 is_stmt 0 view .LVU111
 425 001e 6269     		ldr	r2, [r4, #20]
 119:Src/main.c    ****   
 426              		.loc 1 119 15 view .LVU112
 427 0020 8023     		movs	r3, #128
 428 0022 9B02     		lsls	r3, r3, #10
 429 0024 1343     		orrs	r3, r2
 430 0026 6361     		str	r3, [r4, #20]
 122:Src/main.c    **** 
 431              		.loc 1 122 3 is_stmt 1 view .LVU113
 432 0028 FFF7FEFF 		bl	init_leds
 433              	.LVL12:
 125:Src/main.c    ****   GPIOC->BSRR |= GPIO_BSRR_BR_8;
 434              		.loc 1 125 3 view .LVU114
 125:Src/main.c    ****   GPIOC->BSRR |= GPIO_BSRR_BR_8;
 435              		.loc 1 125 8 is_stmt 0 view .LVU115
 436 002c 4F4B     		ldr	r3, .L18+4
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 14


 437 002e 9969     		ldr	r1, [r3, #24]
 125:Src/main.c    ****   GPIOC->BSRR |= GPIO_BSRR_BR_8;
 438              		.loc 1 125 15 view .LVU116
 439 0030 8022     		movs	r2, #128
 440 0032 9200     		lsls	r2, r2, #2
 441 0034 0A43     		orrs	r2, r1
 442 0036 9A61     		str	r2, [r3, #24]
 126:Src/main.c    **** 
 443              		.loc 1 126 3 is_stmt 1 view .LVU117
 126:Src/main.c    **** 
 444              		.loc 1 126 8 is_stmt 0 view .LVU118
 445 0038 9969     		ldr	r1, [r3, #24]
 126:Src/main.c    **** 
 446              		.loc 1 126 15 view .LVU119
 447 003a 8022     		movs	r2, #128
 448 003c 5204     		lsls	r2, r2, #17
 449 003e 0A43     		orrs	r2, r1
 450 0040 9A61     		str	r2, [r3, #24]
 129:Src/main.c    ****   //Set timer 2 frequency to 1 KHz by dividing by 7,999
 451              		.loc 1 129 3 is_stmt 1 view .LVU120
 129:Src/main.c    ****   //Set timer 2 frequency to 1 KHz by dividing by 7,999
 452              		.loc 1 129 6 is_stmt 0 view .LVU121
 453 0042 E369     		ldr	r3, [r4, #28]
 129:Src/main.c    ****   //Set timer 2 frequency to 1 KHz by dividing by 7,999
 454              		.loc 1 129 16 view .LVU122
 455 0044 0121     		movs	r1, #1
 456 0046 0B43     		orrs	r3, r1
 457 0048 E361     		str	r3, [r4, #28]
 131:Src/main.c    ****   //Set ARR to count to 250
 458              		.loc 1 131 3 is_stmt 1 view .LVU123
 131:Src/main.c    ****   //Set ARR to count to 250
 459              		.loc 1 131 13 is_stmt 0 view .LVU124
 460 004a 8022     		movs	r2, #128
 461 004c D205     		lsls	r2, r2, #23
 462 004e 484B     		ldr	r3, .L18+8
 463 0050 9A46     		mov	r10, r3
 464 0052 9362     		str	r3, [r2, #40]
 133:Src/main.c    ****   //Set edge-aligned mode
 465              		.loc 1 133 3 is_stmt 1 view .LVU125
 133:Src/main.c    ****   //Set edge-aligned mode
 466              		.loc 1 133 13 is_stmt 0 view .LVU126
 467 0054 FA23     		movs	r3, #250
 468 0056 D362     		str	r3, [r2, #44]
 135:Src/main.c    ****   //Set upcounting mode
 469              		.loc 1 135 3 is_stmt 1 view .LVU127
 135:Src/main.c    ****   //Set upcounting mode
 470              		.loc 1 135 7 is_stmt 0 view .LVU128
 471 0058 1368     		ldr	r3, [r2]
 135:Src/main.c    ****   //Set upcounting mode
 472              		.loc 1 135 13 view .LVU129
 473 005a 6026     		movs	r6, #96
 474 005c B343     		bics	r3, r6
 475 005e 1360     		str	r3, [r2]
 137:Src/main.c    ****   //Enable update event generation
 476              		.loc 1 137 3 is_stmt 1 view .LVU130
 137:Src/main.c    ****   //Enable update event generation
 477              		.loc 1 137 7 is_stmt 0 view .LVU131
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 15


 478 0060 1368     		ldr	r3, [r2]
 137:Src/main.c    ****   //Enable update event generation
 479              		.loc 1 137 13 view .LVU132
 480 0062 1020     		movs	r0, #16
 481 0064 8343     		bics	r3, r0
 482 0066 1360     		str	r3, [r2]
 139:Src/main.c    ****   //Enable update interrupt
 483              		.loc 1 139 3 is_stmt 1 view .LVU133
 139:Src/main.c    ****   //Enable update interrupt
 484              		.loc 1 139 7 is_stmt 0 view .LVU134
 485 0068 1368     		ldr	r3, [r2]
 139:Src/main.c    ****   //Enable update interrupt
 486              		.loc 1 139 13 view .LVU135
 487 006a 0225     		movs	r5, #2
 488 006c A946     		mov	r9, r5
 489 006e AB43     		bics	r3, r5
 490 0070 1360     		str	r3, [r2]
 141:Src/main.c    ****   //Enable timer 2
 491              		.loc 1 141 3 is_stmt 1 view .LVU136
 141:Src/main.c    ****   //Enable timer 2
 492              		.loc 1 141 7 is_stmt 0 view .LVU137
 493 0072 D368     		ldr	r3, [r2, #12]
 141:Src/main.c    ****   //Enable timer 2
 494              		.loc 1 141 14 view .LVU138
 495 0074 0B43     		orrs	r3, r1
 496 0076 D360     		str	r3, [r2, #12]
 143:Src/main.c    **** 
 497              		.loc 1 143 3 is_stmt 1 view .LVU139
 143:Src/main.c    **** 
 498              		.loc 1 143 7 is_stmt 0 view .LVU140
 499 0078 1368     		ldr	r3, [r2]
 143:Src/main.c    **** 
 500              		.loc 1 143 13 view .LVU141
 501 007a 0B43     		orrs	r3, r1
 502 007c 1360     		str	r3, [r2]
 146:Src/main.c    ****   //Set priority to 1
 503              		.loc 1 146 3 is_stmt 1 view .LVU142
 504              	.LVL13:
 505              	.LBB6:
 506              	.LBI6:
 507              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 16


  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 17


  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 18


 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 19


 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 20


 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 21


 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 22


 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 23


 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 24


 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 25


 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 26


 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 508              		.loc 2 623 22 view .LVU143
 509              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 510              		.loc 2 625 3 view .LVU144
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 511              		.loc 2 627 5 view .LVU145
 512              		.loc 2 627 20 is_stmt 0 view .LVU146
 513 007e 3D4B     		ldr	r3, .L18+12
 514 0080 9C46     		mov	ip, r3
 515 0082 8023     		movs	r3, #128
 516 0084 1B02     		lsls	r3, r3, #8
 517 0086 6746     		mov	r7, ip
 518 0088 3B60     		str	r3, [r7]
 519              	.LVL14:
 520              		.loc 2 627 20 view .LVU147
 521              	.LBE7:
 522              	.LBE6:
 148:Src/main.c    **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 27


 523              		.loc 1 148 3 is_stmt 1 view .LVU148
 524              	.LBB8:
 525              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 28


 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 526              		.loc 2 730 22 view .LVU149
 527              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 528              		.loc 2 732 3 view .LVU150
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 529              		.loc 2 734 5 view .LVU151
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 29


 530              		.loc 2 734 52 is_stmt 0 view .LVU152
 531 008a C323     		movs	r3, #195
 532 008c 9B00     		lsls	r3, r3, #2
 533 008e 9846     		mov	r8, r3
 534 0090 6346     		mov	r3, ip
 535 0092 4746     		mov	r7, r8
 536 0094 DB59     		ldr	r3, [r3, r7]
 537              		.loc 2 734 33 view .LVU153
 538 0096 1B02     		lsls	r3, r3, #8
 539 0098 1B0A     		lsrs	r3, r3, #8
 540              		.loc 2 734 102 view .LVU154
 541 009a 1343     		orrs	r3, r2
 542              		.loc 2 734 30 view .LVU155
 543 009c 6746     		mov	r7, ip
 544 009e 4546     		mov	r5, r8
 545 00a0 7B51     		str	r3, [r7, r5]
 546              	.LVL15:
 547              		.loc 2 734 30 view .LVU156
 548              	.LBE9:
 549              	.LBE8:
 151:Src/main.c    ****   //Set timer 3 frequency to 800 KHz by dividing by 10
 550              		.loc 1 151 3 is_stmt 1 view .LVU157
 151:Src/main.c    ****   //Set timer 3 frequency to 800 KHz by dividing by 10
 551              		.loc 1 151 6 is_stmt 0 view .LVU158
 552 00a2 E369     		ldr	r3, [r4, #28]
 151:Src/main.c    ****   //Set timer 3 frequency to 800 KHz by dividing by 10
 553              		.loc 1 151 16 view .LVU159
 554 00a4 4D46     		mov	r5, r9
 555 00a6 2B43     		orrs	r3, r5
 556 00a8 E361     		str	r3, [r4, #28]
 153:Src/main.c    ****   //Set ARR to count to 1000
 557              		.loc 1 153 3 is_stmt 1 view .LVU160
 153:Src/main.c    ****   //Set ARR to count to 1000
 558              		.loc 1 153 13 is_stmt 0 view .LVU161
 559 00aa 334B     		ldr	r3, .L18+16
 560 00ac 0735     		adds	r5, r5, #7
 561 00ae 9D62     		str	r5, [r3, #40]
 155:Src/main.c    ****   //Set edge-aligned mode
 562              		.loc 1 155 3 is_stmt 1 view .LVU162
 155:Src/main.c    ****   //Set edge-aligned mode
 563              		.loc 1 155 13 is_stmt 0 view .LVU163
 564 00b0 FA25     		movs	r5, #250
 565 00b2 AD00     		lsls	r5, r5, #2
 566 00b4 A846     		mov	r8, r5
 567 00b6 DD62     		str	r5, [r3, #44]
 157:Src/main.c    ****   //Set upcounting mode
 568              		.loc 1 157 3 is_stmt 1 view .LVU164
 157:Src/main.c    ****   //Set upcounting mode
 569              		.loc 1 157 7 is_stmt 0 view .LVU165
 570 00b8 1D68     		ldr	r5, [r3]
 157:Src/main.c    ****   //Set upcounting mode
 571              		.loc 1 157 13 view .LVU166
 572 00ba 2F00     		movs	r7, r5
 573 00bc B743     		bics	r7, r6
 574 00be 1F60     		str	r7, [r3]
 159:Src/main.c    ****   //Enable update event generation
 575              		.loc 1 159 3 is_stmt 1 view .LVU167
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 30


 159:Src/main.c    ****   //Enable update event generation
 576              		.loc 1 159 7 is_stmt 0 view .LVU168
 577 00c0 1D68     		ldr	r5, [r3]
 159:Src/main.c    ****   //Enable update event generation
 578              		.loc 1 159 13 view .LVU169
 579 00c2 2F00     		movs	r7, r5
 580 00c4 8743     		bics	r7, r0
 581 00c6 1F60     		str	r7, [r3]
 161:Src/main.c    ****   //Configure channels 1 & 2 as outputs
 582              		.loc 1 161 3 is_stmt 1 view .LVU170
 161:Src/main.c    ****   //Configure channels 1 & 2 as outputs
 583              		.loc 1 161 7 is_stmt 0 view .LVU171
 584 00c8 1D68     		ldr	r5, [r3]
 161:Src/main.c    ****   //Configure channels 1 & 2 as outputs
 585              		.loc 1 161 13 view .LVU172
 586 00ca 2F00     		movs	r7, r5
 587 00cc 4D46     		mov	r5, r9
 588 00ce AF43     		bics	r7, r5
 589 00d0 1F60     		str	r7, [r3]
 163:Src/main.c    ****   TIM3->CCMR1 &= ~TIM_CCMR1_CC2S;
 590              		.loc 1 163 3 is_stmt 1 view .LVU173
 163:Src/main.c    ****   TIM3->CCMR1 &= ~TIM_CCMR1_CC2S;
 591              		.loc 1 163 7 is_stmt 0 view .LVU174
 592 00d2 9D69     		ldr	r5, [r3, #24]
 163:Src/main.c    ****   TIM3->CCMR1 &= ~TIM_CCMR1_CC2S;
 593              		.loc 1 163 15 view .LVU175
 594 00d4 0327     		movs	r7, #3
 595 00d6 BD43     		bics	r5, r7
 596 00d8 9D61     		str	r5, [r3, #24]
 164:Src/main.c    ****   //Set output channel 1 to PWM mode 2
 597              		.loc 1 164 3 is_stmt 1 view .LVU176
 164:Src/main.c    ****   //Set output channel 1 to PWM mode 2
 598              		.loc 1 164 7 is_stmt 0 view .LVU177
 599 00da 9D69     		ldr	r5, [r3, #24]
 164:Src/main.c    ****   //Set output channel 1 to PWM mode 2
 600              		.loc 1 164 15 view .LVU178
 601 00dc 274F     		ldr	r7, .L18+20
 602 00de 3D40     		ands	r5, r7
 603 00e0 9D61     		str	r5, [r3, #24]
 166:Src/main.c    ****   //Set output channel 2 to PWM mode 1
 604              		.loc 1 166 3 is_stmt 1 view .LVU179
 166:Src/main.c    ****   //Set output channel 2 to PWM mode 1
 605              		.loc 1 166 7 is_stmt 0 view .LVU180
 606 00e2 9D69     		ldr	r5, [r3, #24]
 166:Src/main.c    ****   //Set output channel 2 to PWM mode 1
 607              		.loc 1 166 15 view .LVU181
 608 00e4 7027     		movs	r7, #112
 609 00e6 3D43     		orrs	r5, r7
 610 00e8 9D61     		str	r5, [r3, #24]
 168:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2M_1;
 611              		.loc 1 168 3 is_stmt 1 view .LVU182
 168:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2M_1;
 612              		.loc 1 168 7 is_stmt 0 view .LVU183
 613 00ea 9D69     		ldr	r5, [r3, #24]
 168:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2M_1;
 614              		.loc 1 168 15 view .LVU184
 615 00ec 244F     		ldr	r7, .L18+24
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 31


 616 00ee 3D40     		ands	r5, r7
 617 00f0 9D61     		str	r5, [r3, #24]
 169:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2M_2;
 618              		.loc 1 169 3 is_stmt 1 view .LVU185
 169:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2M_2;
 619              		.loc 1 169 7 is_stmt 0 view .LVU186
 620 00f2 9D69     		ldr	r5, [r3, #24]
 621 00f4 AC46     		mov	ip, r5
 169:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2M_2;
 622              		.loc 1 169 15 view .LVU187
 623 00f6 8025     		movs	r5, #128
 624 00f8 AD01     		lsls	r5, r5, #6
 625 00fa 6746     		mov	r7, ip
 626 00fc 3D43     		orrs	r5, r7
 627 00fe 9D61     		str	r5, [r3, #24]
 170:Src/main.c    ****   //Enable output compare preload for both channels
 628              		.loc 1 170 3 is_stmt 1 view .LVU188
 170:Src/main.c    ****   //Enable output compare preload for both channels
 629              		.loc 1 170 7 is_stmt 0 view .LVU189
 630 0100 9D69     		ldr	r5, [r3, #24]
 631 0102 AC46     		mov	ip, r5
 170:Src/main.c    ****   //Enable output compare preload for both channels
 632              		.loc 1 170 15 view .LVU190
 633 0104 8025     		movs	r5, #128
 634 0106 ED01     		lsls	r5, r5, #7
 635 0108 6746     		mov	r7, ip
 636 010a 3D43     		orrs	r5, r7
 637 010c 9D61     		str	r5, [r3, #24]
 172:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2PE;
 638              		.loc 1 172 3 is_stmt 1 view .LVU191
 172:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2PE;
 639              		.loc 1 172 7 is_stmt 0 view .LVU192
 640 010e 9D69     		ldr	r5, [r3, #24]
 172:Src/main.c    ****   TIM3->CCMR1 |= TIM_CCMR1_OC2PE;
 641              		.loc 1 172 15 view .LVU193
 642 0110 0827     		movs	r7, #8
 643 0112 3D43     		orrs	r5, r7
 644 0114 9D61     		str	r5, [r3, #24]
 173:Src/main.c    ****   //Set output enable for both channels
 645              		.loc 1 173 3 is_stmt 1 view .LVU194
 173:Src/main.c    ****   //Set output enable for both channels
 646              		.loc 1 173 7 is_stmt 0 view .LVU195
 647 0116 9D69     		ldr	r5, [r3, #24]
 648 0118 AC46     		mov	ip, r5
 173:Src/main.c    ****   //Set output enable for both channels
 649              		.loc 1 173 15 view .LVU196
 650 011a 8025     		movs	r5, #128
 651 011c 2D01     		lsls	r5, r5, #4
 652 011e 6746     		mov	r7, ip
 653 0120 2F43     		orrs	r7, r5
 654 0122 9F61     		str	r7, [r3, #24]
 175:Src/main.c    ****   TIM3->CCER |= TIM_CCER_CC2E;
 655              		.loc 1 175 3 is_stmt 1 view .LVU197
 175:Src/main.c    ****   TIM3->CCER |= TIM_CCER_CC2E;
 656              		.loc 1 175 7 is_stmt 0 view .LVU198
 657 0124 1F6A     		ldr	r7, [r3, #32]
 175:Src/main.c    ****   TIM3->CCER |= TIM_CCER_CC2E;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 32


 658              		.loc 1 175 14 view .LVU199
 659 0126 0F43     		orrs	r7, r1
 660 0128 1F62     		str	r7, [r3, #32]
 176:Src/main.c    ****   //Enable timer 3
 661              		.loc 1 176 3 is_stmt 1 view .LVU200
 176:Src/main.c    ****   //Enable timer 3
 662              		.loc 1 176 7 is_stmt 0 view .LVU201
 663 012a 1F6A     		ldr	r7, [r3, #32]
 176:Src/main.c    ****   //Enable timer 3
 664              		.loc 1 176 14 view .LVU202
 665 012c 0743     		orrs	r7, r0
 666 012e 1F62     		str	r7, [r3, #32]
 178:Src/main.c    **** 
 667              		.loc 1 178 3 is_stmt 1 view .LVU203
 178:Src/main.c    **** 
 668              		.loc 1 178 7 is_stmt 0 view .LVU204
 669 0130 1F68     		ldr	r7, [r3]
 178:Src/main.c    **** 
 670              		.loc 1 178 13 view .LVU205
 671 0132 0F43     		orrs	r7, r1
 672 0134 1F60     		str	r7, [r3]
 187:Src/main.c    ****   //Set timer 1 frequency to 1 KHz by dividing by 8000
 673              		.loc 1 187 3 is_stmt 1 view .LVU206
 187:Src/main.c    ****   //Set timer 1 frequency to 1 KHz by dividing by 8000
 674              		.loc 1 187 6 is_stmt 0 view .LVU207
 675 0136 A369     		ldr	r3, [r4, #24]
 187:Src/main.c    ****   //Set timer 1 frequency to 1 KHz by dividing by 8000
 676              		.loc 1 187 16 view .LVU208
 677 0138 1D43     		orrs	r5, r3
 678 013a A561     		str	r5, [r4, #24]
 189:Src/main.c    ****   //Set ARR to count to 1000
 679              		.loc 1 189 3 is_stmt 1 view .LVU209
 189:Src/main.c    ****   //Set ARR to count to 1000
 680              		.loc 1 189 13 is_stmt 0 view .LVU210
 681 013c 114B     		ldr	r3, .L18+28
 682 013e 5446     		mov	r4, r10
 683 0140 9C62     		str	r4, [r3, #40]
 191:Src/main.c    ****   //Set center aligned mode 3
 684              		.loc 1 191 3 is_stmt 1 view .LVU211
 191:Src/main.c    ****   //Set center aligned mode 3
 685              		.loc 1 191 13 is_stmt 0 view .LVU212
 686 0142 4446     		mov	r4, r8
 687 0144 DC62     		str	r4, [r3, #44]
 193:Src/main.c    ****   //Set upcounting mode
 688              		.loc 1 193 3 is_stmt 1 view .LVU213
 193:Src/main.c    ****   //Set upcounting mode
 689              		.loc 1 193 7 is_stmt 0 view .LVU214
 690 0146 1C68     		ldr	r4, [r3]
 193:Src/main.c    ****   //Set upcounting mode
 691              		.loc 1 193 13 view .LVU215
 692 0148 3443     		orrs	r4, r6
 693 014a 1C60     		str	r4, [r3]
 195:Src/main.c    ****   //Enable timer 1
 694              		.loc 1 195 3 is_stmt 1 view .LVU216
 195:Src/main.c    ****   //Enable timer 1
 695              		.loc 1 195 7 is_stmt 0 view .LVU217
 696 014c 1468     		ldr	r4, [r2]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 33


 195:Src/main.c    ****   //Enable timer 1
 697              		.loc 1 195 13 view .LVU218
 698 014e 8443     		bics	r4, r0
 699 0150 1460     		str	r4, [r2]
 197:Src/main.c    ****   
 700              		.loc 1 197 3 is_stmt 1 view .LVU219
 197:Src/main.c    ****   
 701              		.loc 1 197 7 is_stmt 0 view .LVU220
 702 0152 1A68     		ldr	r2, [r3]
 197:Src/main.c    ****   
 703              		.loc 1 197 13 view .LVU221
 704 0154 0A43     		orrs	r2, r1
 705 0156 1A60     		str	r2, [r3]
 706              	.L17:
 200:Src/main.c    ****   { 
 707              		.loc 1 200 3 is_stmt 1 view .LVU222
 202:Src/main.c    ****     TIM3->CCR2 = TIM1->CNT;
 708              		.loc 1 202 5 view .LVU223
 202:Src/main.c    ****     TIM3->CCR2 = TIM1->CNT;
 709              		.loc 1 202 22 is_stmt 0 view .LVU224
 710 0158 0A4A     		ldr	r2, .L18+28
 711 015a 516A     		ldr	r1, [r2, #36]
 202:Src/main.c    ****     TIM3->CCR2 = TIM1->CNT;
 712              		.loc 1 202 16 view .LVU225
 713 015c 064B     		ldr	r3, .L18+16
 714 015e 5963     		str	r1, [r3, #52]
 203:Src/main.c    ****   }
 715              		.loc 1 203 5 is_stmt 1 discriminator 1 view .LVU226
 203:Src/main.c    ****   }
 716              		.loc 1 203 22 is_stmt 0 discriminator 1 view .LVU227
 717 0160 526A     		ldr	r2, [r2, #36]
 203:Src/main.c    ****   }
 718              		.loc 1 203 16 discriminator 1 view .LVU228
 719 0162 9A63     		str	r2, [r3, #56]
 200:Src/main.c    ****   { 
 720              		.loc 1 200 9 is_stmt 1 view .LVU229
 721 0164 F8E7     		b	.L17
 722              	.L19:
 723 0166 C046     		.align	2
 724              	.L18:
 725 0168 00100240 		.word	1073876992
 726 016c 00080048 		.word	1207961600
 727 0170 3F1F0000 		.word	7999
 728 0174 00E100E0 		.word	-536813312
 729 0178 00040040 		.word	1073742848
 730 017c FFFCFFFF 		.word	-769
 731 0180 FFEFFFFF 		.word	-4097
 732 0184 002C0140 		.word	1073818624
 733              		.cfi_endproc
 734              	.LFE42:
 736              		.text
 737              	.Letext0:
 738              		.file 3 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 739              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 740              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 741              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 742              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 34


 743              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 744              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:19     .text.TIM2_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:25     .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:64     .text.TIM2_IRQHandler:00000024 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:69     .text.init_leds:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:75     .text.init_leds:00000000 init_leds
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:219    .text.init_leds:0000009c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:235    .text._Error_Handler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:241    .text._Error_Handler:00000000 _Error_Handler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:259    .rodata.SystemClock_Config.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:264    .text.SystemClock_Config:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:270    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:373    .text.SystemClock_Config:0000006c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:378    .text.main:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:384    .text.main:00000000 main
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccpvecvL.s:725    .text.main:00000168 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
